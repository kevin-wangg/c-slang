// Generated from ./src/lang/wlp3.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class wlp3Lexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly T__2 = 3
  public static readonly T__3 = 4
  public static readonly T__4 = 5
  public static readonly T__5 = 6
  public static readonly T__6 = 7
  public static readonly T__7 = 8
  public static readonly T__8 = 9
  public static readonly T__9 = 10
  public static readonly T__10 = 11
  public static readonly T__11 = 12
  public static readonly T__12 = 13
  public static readonly T__13 = 14
  public static readonly T__14 = 15
  public static readonly T__15 = 16
  public static readonly T__16 = 17
  public static readonly T__17 = 18
  public static readonly T__18 = 19
  public static readonly T__19 = 20
  public static readonly T__20 = 21
  public static readonly T__21 = 22
  public static readonly T__22 = 23
  public static readonly T__23 = 24
  public static readonly T__24 = 25
  public static readonly T__25 = 26
  public static readonly T__26 = 27
  public static readonly T__27 = 28
  public static readonly T__28 = 29
  public static readonly T__29 = 30
  public static readonly T__30 = 31
  public static readonly WS = 32
  public static readonly INT = 33
  public static readonly STRING = 34
  public static readonly ID = 35
  public static readonly BOOL = 36

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'T__11',
    'T__12',
    'T__13',
    'T__14',
    'T__15',
    'T__16',
    'T__17',
    'T__18',
    'T__19',
    'T__20',
    'T__21',
    'T__22',
    'T__23',
    'T__24',
    'T__25',
    'T__26',
    'T__27',
    'T__28',
    'T__29',
    'T__30',
    'WS',
    'INT',
    'STRING',
    'ID',
    'BOOL'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'int'",
    "'main'",
    "'('",
    "')'",
    "'{'",
    "'}'",
    "','",
    "'bool'",
    "'string'",
    "'int*'",
    "'malloc'",
    "'*'",
    "'&'",
    "'='",
    "';'",
    "'if'",
    "'else'",
    "'while'",
    "'printf'",
    "'return'",
    "'free'",
    "'+'",
    "'-'",
    "'=='",
    "'>'",
    "'<'",
    "'<='",
    "'>='",
    "'&&'",
    "'||'",
    "'!'"
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'WS',
    'INT',
    'STRING',
    'ID',
    'BOOL'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    wlp3Lexer._LITERAL_NAMES,
    wlp3Lexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return wlp3Lexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(wlp3Lexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'wlp3.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return wlp3Lexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return wlp3Lexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return wlp3Lexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return wlp3Lexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02&\xDE\b\x01\x04' +
    '\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04' +
    '\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r' +
    '\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12' +
    '\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17' +
    '\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C' +
    '\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t"\x04' +
    '#\t#\x04$\t$\x04%\t%\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03' +
    '\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03' +
    '\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03' +
    '\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03' +
    '\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F' +
    '\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12' +
    '\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14' +
    '\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15' +
    '\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17' +
    '\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B' +
    '\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E' +
    '\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03!\x06!\xBA\n!\r!\x0E!\xBB' +
    '\x03!\x03!\x03"\x06"\xC1\n"\r"\x0E"\xC2\x03#\x03#\x06#\xC7\n#\r#' +
    '\x0E#\xC8\x03#\x03#\x03$\x03$\x07$\xCF\n$\f$\x0E$\xD2\v$\x03%\x03%\x03' +
    '%\x03%\x03%\x03%\x03%\x03%\x03%\x05%\xDD\n%\x02\x02\x02&\x03\x02\x03\x05' +
    '\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13' +
    '\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02' +
    "\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/" +
    '\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?' +
    '\x02!A\x02"C\x02#E\x02$G\x02%I\x02&\x03\x02\x07\x05\x02\v\f\x0F\x0F"' +
    '"\x03\x022;\x05\x022;C\\c|\x05\x02C\\aac|\x06\x022;C\\aac|\x02\xE2\x02' +
    '\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02' +
    '\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F' +
    '\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15' +
    '\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B' +
    '\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!' +
    "\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02" +
    '\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02' +
    '\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03' +
    '\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02' +
    '\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02' +
    'C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02' +
    '\x02\x02\x03K\x03\x02\x02\x02\x05O\x03\x02\x02\x02\x07T\x03\x02\x02\x02' +
    '\tV\x03\x02\x02\x02\vX\x03\x02\x02\x02\rZ\x03\x02\x02\x02\x0F\\\x03\x02' +
    '\x02\x02\x11^\x03\x02\x02\x02\x13c\x03\x02\x02\x02\x15j\x03\x02\x02\x02' +
    '\x17o\x03\x02\x02\x02\x19v\x03\x02\x02\x02\x1Bx\x03\x02\x02\x02\x1Dz\x03' +
    '\x02\x02\x02\x1F|\x03\x02\x02\x02!~\x03\x02\x02\x02#\x81\x03\x02\x02\x02' +
    "%\x86\x03\x02\x02\x02'\x8C\x03\x02\x02\x02)\x93\x03\x02\x02\x02+\x9A" +
    '\x03\x02\x02\x02-\x9F\x03\x02\x02\x02/\xA1\x03\x02\x02\x021\xA3\x03\x02' +
    '\x02\x023\xA6\x03\x02\x02\x025\xA8\x03\x02\x02\x027\xAA\x03\x02\x02\x02' +
    '9\xAD\x03\x02\x02\x02;\xB0\x03\x02\x02\x02=\xB3\x03\x02\x02\x02?\xB6\x03' +
    '\x02\x02\x02A\xB9\x03\x02\x02\x02C\xC0\x03\x02\x02\x02E\xC4\x03\x02\x02' +
    '\x02G\xCC\x03\x02\x02\x02I\xDC\x03\x02\x02\x02KL\x07k\x02\x02LM\x07p\x02' +
    '\x02MN\x07v\x02\x02N\x04\x03\x02\x02\x02OP\x07o\x02\x02PQ\x07c\x02\x02' +
    'QR\x07k\x02\x02RS\x07p\x02\x02S\x06\x03\x02\x02\x02TU\x07*\x02\x02U\b' +
    '\x03\x02\x02\x02VW\x07+\x02\x02W\n\x03\x02\x02\x02XY\x07}\x02\x02Y\f\x03' +
    '\x02\x02\x02Z[\x07\x7F\x02\x02[\x0E\x03\x02\x02\x02\\]\x07.\x02\x02]\x10' +
    '\x03\x02\x02\x02^_\x07d\x02\x02_`\x07q\x02\x02`a\x07q\x02\x02ab\x07n\x02' +
    '\x02b\x12\x03\x02\x02\x02cd\x07u\x02\x02de\x07v\x02\x02ef\x07t\x02\x02' +
    'fg\x07k\x02\x02gh\x07p\x02\x02hi\x07i\x02\x02i\x14\x03\x02\x02\x02jk\x07' +
    'k\x02\x02kl\x07p\x02\x02lm\x07v\x02\x02mn\x07,\x02\x02n\x16\x03\x02\x02' +
    '\x02op\x07o\x02\x02pq\x07c\x02\x02qr\x07n\x02\x02rs\x07n\x02\x02st\x07' +
    'q\x02\x02tu\x07e\x02\x02u\x18\x03\x02\x02\x02vw\x07,\x02\x02w\x1A\x03' +
    '\x02\x02\x02xy\x07(\x02\x02y\x1C\x03\x02\x02\x02z{\x07?\x02\x02{\x1E\x03' +
    '\x02\x02\x02|}\x07=\x02\x02} \x03\x02\x02\x02~\x7F\x07k\x02\x02\x7F\x80' +
    '\x07h\x02\x02\x80"\x03\x02\x02\x02\x81\x82\x07g\x02\x02\x82\x83\x07n' +
    '\x02\x02\x83\x84\x07u\x02\x02\x84\x85\x07g\x02\x02\x85$\x03\x02\x02\x02' +
    '\x86\x87\x07y\x02\x02\x87\x88\x07j\x02\x02\x88\x89\x07k\x02\x02\x89\x8A' +
    '\x07n\x02\x02\x8A\x8B\x07g\x02\x02\x8B&\x03\x02\x02\x02\x8C\x8D\x07r\x02' +
    '\x02\x8D\x8E\x07t\x02\x02\x8E\x8F\x07k\x02\x02\x8F\x90\x07p\x02\x02\x90' +
    '\x91\x07v\x02\x02\x91\x92\x07h\x02\x02\x92(\x03\x02\x02\x02\x93\x94\x07' +
    't\x02\x02\x94\x95\x07g\x02\x02\x95\x96\x07v\x02\x02\x96\x97\x07w\x02\x02' +
    '\x97\x98\x07t\x02\x02\x98\x99\x07p\x02\x02\x99*\x03\x02\x02\x02\x9A\x9B' +
    '\x07h\x02\x02\x9B\x9C\x07t\x02\x02\x9C\x9D\x07g\x02\x02\x9D\x9E\x07g\x02' +
    '\x02\x9E,\x03\x02\x02\x02\x9F\xA0\x07-\x02\x02\xA0.\x03\x02\x02\x02\xA1' +
    '\xA2\x07/\x02\x02\xA20\x03\x02\x02\x02\xA3\xA4\x07?\x02\x02\xA4\xA5\x07' +
    '?\x02\x02\xA52\x03\x02\x02\x02\xA6\xA7\x07@\x02\x02\xA74\x03\x02\x02\x02' +
    '\xA8\xA9\x07>\x02\x02\xA96\x03\x02\x02\x02\xAA\xAB\x07>\x02\x02\xAB\xAC' +
    '\x07?\x02\x02\xAC8\x03\x02\x02\x02\xAD\xAE\x07@\x02\x02\xAE\xAF\x07?\x02' +
    '\x02\xAF:\x03\x02\x02\x02\xB0\xB1\x07(\x02\x02\xB1\xB2\x07(\x02\x02\xB2' +
    '<\x03\x02\x02\x02\xB3\xB4\x07~\x02\x02\xB4\xB5\x07~\x02\x02\xB5>\x03\x02' +
    '\x02\x02\xB6\xB7\x07#\x02\x02\xB7@\x03\x02\x02\x02\xB8\xBA\t\x02\x02\x02' +
    '\xB9\xB8\x03\x02\x02\x02\xBA\xBB\x03\x02\x02\x02\xBB\xB9\x03\x02\x02\x02' +
    '\xBB\xBC\x03\x02\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\xBE\b!\x02\x02\xBE' +
    'B\x03\x02\x02\x02\xBF\xC1\t\x03\x02\x02\xC0\xBF\x03\x02\x02\x02\xC1\xC2' +
    '\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC2\xC3\x03\x02\x02\x02\xC3D' +
    '\x03\x02\x02\x02\xC4\xC6\x07$\x02\x02\xC5\xC7\t\x04\x02\x02\xC6\xC5\x03' +
    '\x02\x02\x02\xC7\xC8\x03\x02\x02\x02\xC8\xC6\x03\x02\x02\x02\xC8\xC9\x03' +
    '\x02\x02\x02\xC9\xCA\x03\x02\x02\x02\xCA\xCB\x07$\x02\x02\xCBF\x03\x02' +
    '\x02\x02\xCC\xD0\t\x05\x02\x02\xCD\xCF\t\x06\x02\x02\xCE\xCD\x03\x02\x02' +
    '\x02\xCF\xD2\x03\x02\x02\x02\xD0\xCE\x03\x02\x02\x02\xD0\xD1\x03\x02\x02' +
    '\x02\xD1H\x03\x02\x02\x02\xD2\xD0\x03\x02\x02\x02\xD3\xD4\x07v\x02\x02' +
    '\xD4\xD5\x07t\x02\x02\xD5\xD6\x07w\x02\x02\xD6\xDD\x07g\x02\x02\xD7\xD8' +
    '\x07h\x02\x02\xD8\xD9\x07c\x02\x02\xD9\xDA\x07n\x02\x02\xDA\xDB\x07u\x02' +
    '\x02\xDB\xDD\x07g\x02\x02\xDC\xD3\x03\x02\x02\x02\xDC\xD7\x03\x02\x02' +
    '\x02\xDDJ\x03\x02\x02\x02\b\x02\xBB\xC2\xC8\xD0\xDC\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!wlp3Lexer.__ATN) {
      wlp3Lexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(wlp3Lexer._serializedATN)
      )
    }

    return wlp3Lexer.__ATN
  }
}
